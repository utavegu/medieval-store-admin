import { useEffect, useState } from 'react';

import FileDropArea from './FileDropArea';
import ChooseFileInput from './ChooseFileInput';

// TODO: –ü–æ –∏—Ç–æ–≥—É —Ç—ã –±—É–¥–µ—à—å "–∏–º—ç–π–¥–∂ –∞–ø–ª–æ–¥–µ—Ä" (–∏–º—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞). 2 –ø—Ä–æ–ø—Å–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è "–∞—Ä–µ–∏" –∏ "–∏–Ω–ø—É—Ç–∞" - –µ—Å–ª–∏ —Ç—Ä—É, –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è
// TODO: –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞—Ç—å –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∏–ø—ã —Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ–ø—Å—ã (acceptFileTypes)
const FileChooser = () => {
  const [uploadedFiles, setUploadedFiles] = useState<File[] | null>(null);

  // const [test, setTest] = useState<string>('');

  // const img = new Image();
  // console.log(img);
  // <img src={`data:${props.images[0].mimetype};base64,${Buffer.from(props.images[0].file.data).toString('base64')}`} />

  /*
  useEffect(() => {
    if (!!uploadedFiles?.length) {
      setTest(URL.createObjectURL(uploadedFiles[0]));
    }
  }, [test, uploadedFiles])
  */

  if (!!uploadedFiles?.length) {
    const fileReader = new FileReader();
    fileReader.readAsDataURL(uploadedFiles[0]);
    fileReader.onload = function (e) {
      console.log(fileReader.result);
    };
    // img.src = fileReader.result; –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å
  }

  return (
    <div>
      <FileDropArea addUploadedFiles={setUploadedFiles} />
      <ChooseFileInput addUploadedFiles={setUploadedFiles} />
      {/*
        TODOs:
        - –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ (–∫—Ä–µ—Å—Ç–∏–∫ —Å —Ç—É–ª—Ç–∏–ø–æ–º –Ω–∞–ø—Ä–æ—Ç–∏–≤ –∫–∞–∂–¥–æ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞)
        - –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        - –ò –µ—â—ë –±—ã –ø—Ä–µ–≤—å—é—à–∫–∏ –º–∞–ª–µ–Ω—å–∫–∏–µ –∏–º –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞—Ç—å
      */}
      <div>
        {!!uploadedFiles?.length && (
          <>
            <ul>
              {uploadedFiles.map((file, i) => (
                <li key={i}>{file.name}</li>
              ))}
            </ul>
            <b>–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {uploadedFiles?.length}</b>
          </>
        )}
      </div>

      {/* <img src={test} alt='—Ç–µ—Å—Ç–æ–≤–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞' /> */}
    </div>
  );
};

export default FileChooser;

/*
–ù–∞–±—Ä–æ—Å–∫–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
 const data = new FormData();
files.forEach((file, i) => {
  // TODO: –ü—Ä–æ–ø—É—Å–∫–∞—Ç—å —Ç–æ–ª—å–∫–æ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –ø–æ type (–µ—Å–ª–∏ —Ñ–∞–π–ª —Ç–∞–π–ø —Ä–∞–≤–µ–Ω –∫–∞–∫–æ–º—É-–ª–∏–±–æ –∑–Ω–∞—á–µ–Ω–∏—é –∏–∑ –º–∞—Å—Å–∏–≤–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∞–ø–ø–µ–Ω–¥, –∏–Ω–∞—á–µ –∫–æ–Ω—Ç–∏–Ω—É–µ)
  data.append(`image-${i}`, file, file.name);
});
data.append('title', '–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–æ–≤–∞—Ä–∞');
data.append('description', '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞');
files.forEach((file, i) => {
  data.append(`file-${i}`, file, file.name);
});
console.log(data);
  axios.post('url', formData, options)
  headers: {
      'content-type': file.type,
      'content-length': `${file.size}`, // üëà Headers need to be a string –°–£–ú–ú–ê –§–ê–ô–õ–°–ê–ô–ó–û–í
    },
*/
