import { FC, useState } from 'react';
import { declOfNum } from '../../utils/declOfNum';
import FileDropArea from './FileDropArea';
import ChooseFileInput from './ChooseFileInput';
import styles from './ImageUploader.module.css';

const imageUploaderConfig: {
  maxFileSizeInBytes: number;
  acceptFileTypes: string[];
  maxPhotosQuantity: number;
} = {
  // TODO: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–π —Å –±—ç–∫–æ–º - —Ç–∞–º –ø–æ–Ω–∏–∑—å –¥–æ 2—Ö –º–±, –∞ —Ç—É—Ç —Ç–∏–ø—ã —Ä–∞—Å—à–∏—Ä—å –¥–æ 5 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
  maxFileSizeInBytes: 2000000,
  acceptFileTypes: ['image/jpeg', 'image/png'],
  maxPhotosQuantity: 5,
};

type PropTypes = {
  view: 'area' | 'input' | 'both'; // TODO: enum
  isShowPreviews: boolean;
};

const ImageUploader: FC<PropTypes> = ({ view, isShowPreviews }) => {
  const [uploadedFiles, setUploadedFiles] = useState<File[]>([]);

  const deleteImageHandler = (fileName: string) => {
    const editedUploadedFiles = uploadedFiles.filter((file) => file.name !== fileName);
    // TODO: –ê –µ—Å–ª–∏ —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, —Ç–æ –µ—â—ë –∏ –Ω–∞ –±—ç–∫ –¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
    if (editedUploadedFiles) {
      setUploadedFiles(editedUploadedFiles);
    } else {
      setUploadedFiles([]);
    }
  };

  const freeSlotsLeft = imageUploaderConfig.maxPhotosQuantity - uploadedFiles.length;
  const freeSlotsMessage = freeSlotsLeft
    ? `–ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –µ—â—ë ${freeSlotsLeft} ${declOfNum(freeSlotsLeft, ['—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é', '—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏', '—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π'])}`
    : '–í—ã –∑–∞–≥—Ä—É–∑–∏–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π';

  return (
    <div>
      {!(freeSlotsLeft <= 0) && (
        <div>
          {(view === 'area' || view === 'both') && (
            <FileDropArea
              uploadedFiles={uploadedFiles}
              addUploadedFiles={setUploadedFiles}
              imageUploaderConfig={imageUploaderConfig}
            />
          )}
          {(view === 'input' || view === 'both') && (
            <ChooseFileInput
              uploadedFiles={uploadedFiles}
              addUploadedFiles={setUploadedFiles}
              imageUploaderConfig={imageUploaderConfig}
            />
          )}
        </div>
      )}
      <div>
        {!!uploadedFiles.length && (
          <>
            <b>–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {uploadedFiles.length}</b>
            <br />
            <b>{freeSlotsMessage}</b>
            {isShowPreviews ? (
              <ul className={styles.previewsContainer}>
                {uploadedFiles.map((file, i) => (
                  <li
                    key={i}
                    className={styles.imageContainer}
                  >
                    {
                      <img
                        src={URL.createObjectURL(file)}
                        alt={file.name}
                      />
                    }
                    <button
                      className={styles.removeImageButton}
                      onClick={() => deleteImageHandler(file.name)}
                    >
                      —Ö
                    </button>
                  </li>
                ))}
              </ul>
            ) : (
              <ul>
                {uploadedFiles.map((file, i) => (
                  <li key={i}>
                    {file.name}
                    <button onClick={() => deleteImageHandler(file.name)}>—Ö</button>
                  </li>
                ))}
              </ul>
            )}
          </>
        )}
      </div>
    </div>
  );
};

export default ImageUploader;

/*
–ù–∞–±—Ä–æ—Å–∫–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
 const data = new FormData();
files.forEach((file, i) => {
  // TODO: –ü—Ä–æ–ø—É—Å–∫–∞—Ç—å —Ç–æ–ª—å–∫–æ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –ø–æ type (–µ—Å–ª–∏ —Ñ–∞–π–ª —Ç–∞–π–ø —Ä–∞–≤–µ–Ω –∫–∞–∫–æ–º—É-–ª–∏–±–æ –∑–Ω–∞—á–µ–Ω–∏—é –∏–∑ –º–∞—Å—Å–∏–≤–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∞–ø–ø–µ–Ω–¥, –∏–Ω–∞—á–µ –∫–æ–Ω—Ç–∏–Ω—É–µ)
  data.append(`image-${i}`, file, file.name);
});
data.append('title', '–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–æ–≤–∞—Ä–∞');
data.append('description', '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞');
files.forEach((file, i) => {
  data.append(`file-${i}`, file, file.name);
});
console.log(data);
  axios.post('url', formData, options)
  headers: {
      'content-type': file.type,
      'content-length': `${file.size}`, // üëà Headers need to be a string –°–£–ú–ú–ê –§–ê–ô–õ–°–ê–ô–ó–û–í
    },
*/
