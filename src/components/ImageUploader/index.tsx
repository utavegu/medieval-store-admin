import { FC, useState } from 'react';

import FileDropArea from './FileDropArea';
import ChooseFileInput from './ChooseFileInput';

const imageUploaderConfig: { maxFileSizeInBytes: number; acceptFileTypes: string[] } = {
  // TODO: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–π —Å –±—ç–∫–æ–º - —Ç–∞–º –ø–æ–Ω–∏–∑—å –¥–æ 2—Ö –º–±, –∞ —Ç—É—Ç —Ç–∏–ø—ã —Ä–∞—Å—à–∏—Ä—å –¥–æ 5 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
  maxFileSizeInBytes: 2000000,
  acceptFileTypes: ['image/jpeg', 'image/png'],
};

type PropTypes = {
  view: 'area' | 'input' | 'both'; // TODO: enum
};

const ImageUploader: FC<PropTypes> = ({ view }) => {
  const [uploadedFiles, setUploadedFiles] = useState<File[] | null>(null);

  return (
    <div>
      {(view === 'area' || view === 'both') && (
        <FileDropArea
          addUploadedFiles={setUploadedFiles}
          imageUploaderConfig={imageUploaderConfig}
        />
      )}
      {(view === 'input' || view === 'both') && (
        <ChooseFileInput
          addUploadedFiles={setUploadedFiles}
          imageUploaderConfig={imageUploaderConfig}
        />
      )}
      {/*
        TODOs:
        - –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ (–∫—Ä–µ—Å—Ç–∏–∫ —Å —Ç—É–ª—Ç–∏–ø–æ–º –Ω–∞–ø—Ä–æ—Ç–∏–≤ –∫–∞–∂–¥–æ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞. –ü—Å–µ–≤–¥–æ?)
        - –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤—ã—Ö - –Ω–µ –∑–∞—Ç–∏—Ä–∞—Ç—å, –∞ –¥–æ–±–∞–≤–ª—è—Ç—å (?) - —Å–ª–∏—à–∫–æ–º –º—É—Ç–æ—Ä–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª, –º–æ–∂–µ—Ç –∏ –Ω–µ –±—É–¥—É... –æ–¥–Ω–∞–∫–æ —Ç–ø –º–æ–≥—É—Ç –±—É–∫—Å–∞–Ω—É—Ç—å, –∫–æ—Ç–æ—Ä—ã–µ —Ç–æ–ª—å–∫–æ –ø–æ 1 —Ñ–∞–π–ª—É —É–º–µ—é—Ç –∑–∞ —Ä–∞–∑ –¥–æ–±–∞–≤–ª—è—Ç—å... —Ç–∞–∫ —á—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ —Å—Ç–æ–∏—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ uploadedFiles –∏ –∏—Å—Ö–æ–¥—è –∏–∑ —ç—Ç–æ–≥–æ –º–µ–Ω—è—Ç—å –ª–∏–º–∏—Ç –≤ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–µ
        - –ò –µ—â—ë –±—ã –ø—Ä–µ–≤—å—é—à–∫–∏ –º–∞–ª–µ–Ω—å–∫–∏–µ –∏–º –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞—Ç—å - –ø–æ—Å–º–æ—Ç—Ä–∏ –∫–∞–∫ –≤ –∏–¥–µ–∫–µ —Å–¥–µ–ª–∞–ª –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ª–æ–≥–æ—Ç–∏–ø–∞ –∏–∑ –∞–¥–º–∏–Ω–∫–∏, —Ç–∞–∫–∏–µ –∂ —Å–≤–æ–π—Å—Ç–≤–∞ –∏ –ø—Ä–µ–≤—å—é—à–∫–∞–º (–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º). –°–∞–º–∞ –∫–æ—Ä–æ–±–∫–∞ –¥–ª—è –ø—Ä–µ–≤—å—é—à–µ–∫ - —Ñ–ª–µ–∫—Å
      */}
      <div>
        {!!uploadedFiles?.length && (
          <>
            <ul>
              {uploadedFiles.map((file, i) => (
                <li key={i}>
                  <img
                    src={URL.createObjectURL(file)}
                    alt={file.name}
                  />
                </li>
              ))}
            </ul>
            <b>–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {uploadedFiles?.length}</b>
          </>
        )}
      </div>
    </div>
  );
};

export default ImageUploader;

/*
–ù–∞–±—Ä–æ—Å–∫–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
 const data = new FormData();
files.forEach((file, i) => {
  // TODO: –ü—Ä–æ–ø—É—Å–∫–∞—Ç—å —Ç–æ–ª—å–∫–æ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –ø–æ type (–µ—Å–ª–∏ —Ñ–∞–π–ª —Ç–∞–π–ø —Ä–∞–≤–µ–Ω –∫–∞–∫–æ–º—É-–ª–∏–±–æ –∑–Ω–∞—á–µ–Ω–∏—é –∏–∑ –º–∞—Å—Å–∏–≤–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∞–ø–ø–µ–Ω–¥, –∏–Ω–∞—á–µ –∫–æ–Ω—Ç–∏–Ω—É–µ)
  data.append(`image-${i}`, file, file.name);
});
data.append('title', '–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–æ–≤–∞—Ä–∞');
data.append('description', '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞');
files.forEach((file, i) => {
  data.append(`file-${i}`, file, file.name);
});
console.log(data);
  axios.post('url', formData, options)
  headers: {
      'content-type': file.type,
      'content-length': `${file.size}`, // üëà Headers need to be a string –°–£–ú–ú–ê –§–ê–ô–õ–°–ê–ô–ó–û–í
    },
*/
